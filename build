#!/usr/bin/env python3

from subprocess import run
import sys
import shutil
import argparse


"""
@todo 
mkdir config/jwt
openssl genrsa -out config/jwt/private.pem -aes256 4096
openssl rsa -pubout -in config/jwt/private.pem -out config/jwt/public.pem
"""


def main():
    parser = argparse.ArgumentParser(description="Build project")
    possible_envs = ["dev", "test", "prod"]
    parser.add_argument("env",
                        help="Build environment",
                        choices=possible_envs,
                        nargs="?",
                        default="dev")
    args = parser.parse_args()

    print_build_msg(args.env)
    if args.env == "dev":
        dev()
    elif args.env == "test":
        test()
    elif args.env == "prod":
        prod()
    else:
        print_error('Wrong environment. WTF is "%s"?' % args.env)
        sys.exit(1)
    sys.exit(0)


def dev():
    requirements("composer")
    run(["composer", "install"])


def test():
    requirements("composer", "php")
    run(["composer", "install", "-o", "-a"])
    run(["php", "bin/console", "cache:clear", "--env=test", "--no-debug"])
    run(["php", "bin/console", "doctrine:schema:drop --force"])
    run(["php", "bin/console", "doctrine:schema:create"])
    run(["php", "bin/console", "doctrine:fixtures:load", "--no-interaction"])


def prod():
    requirements("composer", "php")
    run(["composer", "install", "--no-dev", "-o", "-a"])
    run(["php", "bin/console", "cache:clear", "--env=prod", "--no-debug"])
    run(["php", "bin/console", "doctrine:migrations:migrate"])


# -------- UTILS


def requirements(*names):
    try:
        for name in names:
            if shutil.which(name) is None:
                raise SystemError("Could not find \"%s\" on system." % name)
    except SystemError as e:
        print_error(str(e))
        sys.exit(1)


def print_build_msg(env):
    msg = "Production build" if env == "prod" else "Development build"
    color = BC.BOLD + BC.WARNING if env == "prod" else BC.OKBLUE
    separator = "-" * (len(msg) + 4)
    print("\n" + separator)
    print("| %s%s%s |" % (color, msg.upper(), BC.ENDC))
    print(separator + "\n")


def print_error(msg):
    print(BC.FAIL + "/!\\\t%s\t/!\\" % msg + BC.ENDC)


class BC:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


# -------- EXECUTION


if __name__ == "__main__":
    main()
